{
	"pages": [
		{"title": "BinAST", "text": "BinAST\nDavid Teller, October 2017\n\nWhat it&#39;s about\n\nOptimizing first byte sent to execution start.\nDesigned for multi-megabyte pages (Facebook, LinkedIn, ...).\n..by redesigning delivery of JavaScript code.\nmozilla + Facebook + ...\n\n\nWhy?\n\nGoogle Sheets, Google Docs, Yahoo, LinkedIn, Facebook: 3-7Mb+ JS code.\nUpdated very often.\nFacebook: 500-900ms JS parsing.\n\n\nAbout jank\n\n16ms- (sustained) Smooth\n40ms+ (sustained) Choppy\n50ms+ (single) Jank\n100ms+ (single) Broken\n10s+ (single) Stopped responding\n\n\nJS source text is an inefficient medium\n\nambiguous/complex (⇒ slow tokenization/parsing);\nflat + SyntaxError semantics (⇒ cannot skip/parallelize);\nrepeated (⇒ minimizers).\n\n\nWhat about JS source binary?\nExperiments suggest we can have:\n\nparsing speed 3x;\nlazy parsing speed 8x;\nsmaller payload than minimized code.\n\nNot actual benchmarks.\n\nAlternatives\n\nMinimizers\n\n⊕ simple for web devs;\n⊖ not very good;\n⊖ kills readability/debuggability.\n\n\nLazy loading\n\n⊕ better startup time;\n⊖ doesn&#39;t scale up.\n\n\nSyntax parsing\n\n⊕ transparent for web devs;\n⊖ not good enough.\n\n\nGoogle\n&quot;Prefetch &amp; compile your code from ServiceWorkers.&quot;\n\n⊕ simple for browser devs\n⊖ bandwidth, battery, server energy, memory cost;\n⊖ complex for web devs.\n\n\nTowards (binary) AST\n\nThe AST\n\nfuture compatible?\nsize efficient?\nspeed efficient?\n\n\nFuture compatibility\nfunction foo() {\n    // ...\n}\n\nFunctionDeclaration {\n  name: Identifier(&quot;foo&quot;),\n  body: ...,\n  args: [],\n  async: false,     // ES6\n  generator: false, // ES6\n}\n\n\nFuture compatibility (2)\n// header\n&quot;FunctionDeclaration&quot;: [&quot;name&quot;, &quot;body&quot;, &quot;args&quot;, &quot;async&quot;, &quot;generator&quot;],\n\n\nSpeed efficiency (1)\n\nNo string sniffing.\nRelax SyntaxError to allow skipping functions.\n\n\nSpeed efficiency (2)\n\nDon&#39;t build proofs, check them:\n\nScope {\n    const: [&quot;x&quot;, &quot;y&quot;],\n    let: [&quot;a&quot;],\n    var: [],\n    captured: [&quot;z&quot;],\n    hasDirectEval: false,\n}\n\n\nTowards a binary (AST)\n\nBinary?\n\nfuture compatible?\nsize efficient?\nspeed efficient?\n\n\nLayout\n\nheader\ngrammar table;\natoms table;\ntree(s);\ncomments? (TBD)\n\n\nSize efficiency\n\ndo not repeat strings/atoms/identifiers/properties;\nuse grammar table as a compression mechanism\ncompress everything.\n\n\nSpeed efficiency (2)\n\natoms table may be parsed early/concurrently;\ngrammar table may be rejected early;\n(some) subtrees may be skipped/parallelized.\n\n\nConclusions\n\nStatus\n\nTC-39: stage 1.\nPatches: review in progress.\nSize: not satisfying yet :/\nSpeed: cannot measure yet.\n\n\nNext steps\n\nLand JS shell-only version.\nMeasure speed.\nBind to DOM.\nLimited opt-in test with Facebook.\n\n\nWant to join?\n\nIRC: #binjs\nNewsgroup/mailing-list: dev-binast\n\n", "tags": "", "url": "binast.html"}
	]
}
